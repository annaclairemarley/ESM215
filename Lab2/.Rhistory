SCC_1.5
df_t
dam_ac_2<-rep(0, p_years[1])
dam_ac_2[2] <- 1
df_t <- rep(0, p_years) # dicsountings
# df_t[1] <- 1
r <- 0.03 # discount rate
####################
# looping over rest of the years
for (j in 2:p_years) {
#Part 1: Economic model w/o climate damages
#Economic output
K[j]<-(1-p_capDep)*K[j-1]+p_saving*Y_net[j-1]  #capital accumulation
Y_gross[j]<-TFP[j]*K[j]^p_capShare*pop[j]^(1-p_capShare) #Cobb-Douglas production function
gdppc[j]=Y_gross[j]/pop[j]
#emissions
em_MtCO2[j]<-pop[j]*gdppc[j]*enInt[j]*emInt[j]+dam_ac_2[j] #Kaya identity
em_ppm[j]<-em_MtCO2[j]/7810 # convert to atmospheric CO2 concentrations
#Part 2: climate model
#CO2 concentration
CO2ppm[j]<-CO2ppm[j-1]+0.5*((em_ppm[j])- (CO2ppm[j-1]-(ic_preCO2))/(p_carDecay)) #CO2 concentration accumulation
#Radiative forcing
rad_CO2_Wpm2<-5.35*log(CO2ppm[j]/ic_preCO2)
# Converting to temperature
Teq[j]<-rad_CO2_Wpm2*(p_climSens/(5.3*log(2))) #Equilibrium temperature
T[j]=T[j-1]+p_climDelay*(Teq[j]-T[j-1]) #Transient temperature
#Part 3: Economic model with climate damages
climateShare<-(p_damage*T[j]^2)/(1+p_damage*T[j]^2) # damage function
climateDamage[j]<-climateShare*Y_gross[j] # climate damages
Y_net[j]<-Y_gross[j]-climateDamage[j] # output net of damages
C[j]<-Y_net[j]-p_saving*Y_net[j] # consumption
C_pc[j]<-(C[j]/pop[j])*1000 #per capita consumption
#discounting
df_t[j] <- 1/((1+r)^(j-1))
}
climateDamage_2011 <- climateDamage
BAU_and_2011 <- left_join(climateDamage_BAU_df, climateDamage_2011_df) %>%
select(-observation) %>%
mutate(diff = P_2011 - BAU) %>%
mutate(time = 1:n()) %>%
mutate(discounted = df_t*diff)
SCC_1.5 <- sum(BAU_and_2011$discounted)*1000000
SCC_1.5
climateDamage_2011_df <- as.data.frame(climateDamage_2011) %>%
rename(P_2011 = V1)%>%
mutate(observation = 1:n())
BAU_and_2011 <- left_join(climateDamage_BAU_df, climateDamage_2011_df) %>%
select(-observation) %>%
mutate(diff = P_2011 - BAU) %>%
mutate(time = 1:n()) %>%
mutate(discounted = df_t*diff)
SCC_1.5 <- sum(BAU_and_2011$discounted)*1000000
SCC_1.5
emInt
# Fixed Economic parameters (LEAVE THIS ALONE FOR NOW)
p_saving<-c(.22) # output saved, default at 0.22
p_capShare<-c(.3) # Cobb-Douglas capital share, defaut at 0.3
p_capDep<-c(.1) # capital depreciation, default at 0.1
p_TFP_g<-c(.005) # TFP growth rate, default at 0.005
p_damage<-c(.009) # default at 0.009
# Variable Economic parameters (TRY DIFFERENT VALUES)
p_emInt_g<-c(-.005) # default at -.005
p_enInt_g<-c(-.01) # default at -.01
p_pop_g<-c(.01) # default at .01
# Fixed climate parameters (LEAVE THIS ALONE)
p_carDecay<-c(400) # carbon decay, default 400
p_climDelay<-c(.015) # climate decay, default 0.015
#Variable climate parameters (TRY DIFFERENT VALUES)
p_climSens<-c(2.5) # climate sensitivity default 2.5
# Fixed Economic parameters (LEAVE THIS ALONE FOR NOW)
p_saving<-c(.22) # output saved, default at 0.22
p_capShare<-c(.3) # Cobb-Douglas capital share, defaut at 0.3
p_capDep<-c(.1) # capital depreciation, default at 0.1
p_TFP_g<-c(.005) # TFP growth rate, default at 0.005
p_damage<-c(.009) # default at 0.009
# Variable Economic parameters (TRY DIFFERENT VALUES)
p_emInt_g<-c(-.005) # default at -.005
p_enInt_g<-c(-.01) # default at -.01
p_pop_g<-c(.01) # default at .01
# Fixed climate parameters (LEAVE THIS ALONE)
p_carDecay<-c(400) # carbon decay, default 400
p_climDelay<-c(.015) # climate decay, default 0.015
#Variable climate parameters (TRY DIFFERENT VALUES)
p_climSens<-c(2.5) # climate sensitivity default 2.5
###### Part 0c: Initial conditions (in 2010) ######
# years
p_years<-c(291) # an aray
# Economic
ic_pop<-c(6900) # in millions
ic_enInt<-c(5.98) # in EJ/$trill
ic_emInt<-c(68.27) # in Mt CO2 /EJ
ic_K<-c(139.65) # $trill
ic_TFP<-c(.03)
# Climate
ic_preCO2<-c(275) # ppm
ic_nowCO2<-c(380) # ppm
ic_T<-c(0.8) # degree C above preindustrial
# creating empty matrices for storing data
# matrix notation: matrix(data, number of rows, number of columns)
year<-matrix(0,p_years,1)
pop<-matrix(0, p_years,1)
enInt<-matrix(0, p_years,1)
emInt<-matrix(0, p_years,1)
TFP<-matrix(0, p_years,1)
Y_gross<-matrix(0, p_years,1)
K<-matrix(0, p_years,1)
gdppc<-matrix(0, p_years,1)
CO2ppm<-matrix(0, p_years,1)
em_MtCO2<-matrix(0,p_years,1)
em_ppm<-matrix(0,p_years,1)
Y_net<-matrix(0,p_years,1)
C<-matrix(0,p_years,1)
C_pc<-matrix(0,p_years,1)
Teq<-matrix(0,p_years,1)
climateDamage<-matrix(0,p_years,1)
############################ Part 1: economic model ##################################
####### Part 1a: Getting exogenous changes in population, energy intensity, emissions intensity, TFP#######
# initializing for first period
year[1]<-2010
pop[1]<-ic_pop
enInt[1]<-ic_enInt
emInt[1]<-ic_emInt
TFP[1]<-ic_TFP
for (j in 2:p_years) {
year[j]<-year[j-1]+1
pop[j]=pop[j-1]*(1+p_pop_g)
enInt[j]=enInt[j-1]*(1+p_enInt_g)
emInt[j]=emInt[j-1]*(1+p_emInt_g)
TFP[j]=TFP[j-1]*(1+p_TFP_g)
}
######## Part 1b: Getting gross output, capital, emissions ##############
# initializing for first period
#Part 1: Economic model w/o climate damages
K[1]<-ic_K
Y_gross[1]<-TFP[1]*K[1]^p_capShare*pop[1]^(1-p_capShare)
#Part 2: climate model
#CO2 concentration
CO2ppm[1]<-ic_nowCO2
T[1]=ic_T
#Part 3: Economic model with climate damages
#climate damages
climateShare<-(p_damage*T[1]^2)/(1+p_damage*T[1]^2) # damage function
climateDamage[1]<-climateShare*Y_gross[1] #climate damages
Y_net[1]<-Y_gross[1]-climateDamage[1] # net of damages output
C[1]<-Y_net[1]-p_saving*Y_net[1]
C_pc[1]<-(C[1]/pop[1])*1000
####   What i added #####
#climate damages equation
# D = ^*Y(gross output)
# D = climateDamage[1] * Y_gross[1
dam_ac_2<-rep(0, p_years[1])
dam_ac_2[2] <- 1
df_t <- rep(0, p_years) # dicsountings
# df_t[1] <- 1
r <- 0.03 # discount rate
####################
# looping over rest of the years
for (j in 2:p_years) {
#Part 1: Economic model w/o climate damages
#Economic output
K[j]<-(1-p_capDep)*K[j-1]+p_saving*Y_net[j-1]  #capital accumulation
Y_gross[j]<-TFP[j]*K[j]^p_capShare*pop[j]^(1-p_capShare) #Cobb-Douglas production function
gdppc[j]=Y_gross[j]/pop[j]
#emissions
em_MtCO2[j]<-pop[j]*gdppc[j]*enInt[j]*emInt[j] #+dam_ac_2[j] #Kaya identity
em_ppm[j]<-em_MtCO2[j]/7810 # convert to atmospheric CO2 concentrations
#Part 2: climate model
#CO2 concentration
CO2ppm[j]<-CO2ppm[j-1]+0.5*((em_ppm[j])- (CO2ppm[j-1]-(ic_preCO2))/(p_carDecay)) #CO2 concentration accumulation
#Radiative forcing
rad_CO2_Wpm2<-5.35*log(CO2ppm[j]/ic_preCO2)
# Converting to temperature
Teq[j]<-rad_CO2_Wpm2*(p_climSens/(5.3*log(2))) #Equilibrium temperature
T[j]=T[j-1]+p_climDelay*(Teq[j]-T[j-1]) #Transient temperature
#Part 3: Economic model with climate damages
climateShare<-(p_damage*T[j]^2)/(1+p_damage*T[j]^2) # damage function
climateDamage[j]<-climateShare*Y_gross[j] # climate damages
Y_net[j]<-Y_gross[j]-climateDamage[j] # output net of damages
C[j]<-Y_net[j]-p_saving*Y_net[j] # consumption
C_pc[j]<-(C[j]/pop[j])*1000 #per capita consumption
#discounting
df_t[j] <- 1/((1+r)^(j-1))
}
## I added **
climateDamage_BAU <- climateDamage
# looping over rest of the years
for (j in 2:p_years) {
#Part 1: Economic model w/o climate damages
#Economic output
K[j]<-(1-p_capDep)*K[j-1]+p_saving*Y_net[j-1]  #capital accumulation
Y_gross[j]<-TFP[j]*K[j]^p_capShare*pop[j]^(1-p_capShare) #Cobb-Douglas production function
gdppc[j]=Y_gross[j]/pop[j]
#emissions
em_MtCO2[j]<-pop[j]*gdppc[j]*enInt[j]*emInt[j]+dam_ac_2[j] #Kaya identity
em_ppm[j]<-em_MtCO2[j]/7810 # convert to atmospheric CO2 concentrations
#Part 2: climate model
#CO2 concentration
CO2ppm[j]<-CO2ppm[j-1]+0.5*((em_ppm[j])- (CO2ppm[j-1]-(ic_preCO2))/(p_carDecay)) #CO2 concentration accumulation
#Radiative forcing
rad_CO2_Wpm2<-5.35*log(CO2ppm[j]/ic_preCO2)
# Converting to temperature
Teq[j]<-rad_CO2_Wpm2*(p_climSens/(5.3*log(2))) #Equilibrium temperature
T[j]=T[j-1]+p_climDelay*(Teq[j]-T[j-1]) #Transient temperature
#Part 3: Economic model with climate damages
climateShare<-(p_damage*T[j]^2)/(1+p_damage*T[j]^2) # damage function
climateDamage[j]<-climateShare*Y_gross[j] # climate damages
Y_net[j]<-Y_gross[j]-climateDamage[j] # output net of damages
C[j]<-Y_net[j]-p_saving*Y_net[j] # consumption
C_pc[j]<-(C[j]/pop[j])*1000 #per capita consumption
#discounting
df_t[j] <- 1/((1+r)^(j-1))
}
climateDamage_2011 <- climateDamage
climateDamage_BAU_df <- as.data.frame(climateDamage_BAU) %>%
rename(BAU= V1)%>%
mutate(observation = 1:n())
climateDamage_2011_df <- as.data.frame(climateDamage_2011) %>%
rename(P_2011 = V1)%>%
mutate(observation = 1:n())
BAU_and_2011 <- left_join(climateDamage_BAU_df, climateDamage_2011_df) %>%
select(-observation) %>%
mutate(diff = P_2011 - BAU) %>%
mutate(time = 1:n()) %>%
mutate(discounted = df_t*diff)
SCC_1.5 <- sum(BAU_and_2011$discounted)*1000000
SCC_1.5
r <- 0.015 # discount rate
####################
# looping over rest of the years
for (j in 2:p_years) {
#Part 1: Economic model w/o climate damages
#Economic output
K[j]<-(1-p_capDep)*K[j-1]+p_saving*Y_net[j-1]  #capital accumulation
Y_gross[j]<-TFP[j]*K[j]^p_capShare*pop[j]^(1-p_capShare) #Cobb-Douglas production function
gdppc[j]=Y_gross[j]/pop[j]
#emissions
em_MtCO2[j]<-pop[j]*gdppc[j]*enInt[j]*emInt[j]+dam_ac_2[j] #Kaya identity
em_ppm[j]<-em_MtCO2[j]/7810 # convert to atmospheric CO2 concentrations
#Part 2: climate model
#CO2 concentration
CO2ppm[j]<-CO2ppm[j-1]+0.5*((em_ppm[j])- (CO2ppm[j-1]-(ic_preCO2))/(p_carDecay)) #CO2 concentration accumulation
#Radiative forcing
rad_CO2_Wpm2<-5.35*log(CO2ppm[j]/ic_preCO2)
# Converting to temperature
Teq[j]<-rad_CO2_Wpm2*(p_climSens/(5.3*log(2))) #Equilibrium temperature
T[j]=T[j-1]+p_climDelay*(Teq[j]-T[j-1]) #Transient temperature
#Part 3: Economic model with climate damages
climateShare<-(p_damage*T[j]^2)/(1+p_damage*T[j]^2) # damage function
climateDamage[j]<-climateShare*Y_gross[j] # climate damages
Y_net[j]<-Y_gross[j]-climateDamage[j] # output net of damages
C[j]<-Y_net[j]-p_saving*Y_net[j] # consumption
C_pc[j]<-(C[j]/pop[j])*1000 #per capita consumption
#discounting
df_t[j] <- 1/((1+r)^(j-1))
}
climateDamage_2011 <- climateDamage
climateDamage_2011_df <- as.data.frame(climateDamage_2011) %>%
rename(P_2011 = V1)%>%
mutate(observation = 1:n())
BAU_and_2011 <- left_join(climateDamage_BAU_df, climateDamage_2011_df) %>%
select(-observation) %>%
mutate(diff = P_2011 - BAU) %>%
mutate(time = 1:n()) %>%
mutate(discounted = df_t*diff)
SCC_1.5 <- sum(BAU_and_2011$discounted)*1000000
SCC_1.5
dam_ac_2<-rep(0, p_years[1])
dam_ac_2[2] <- 1/1000000 # putting 1 Mt for 2011
df_t <- rep(0, p_years) # dicsountings
#df_t[1] <- 1
r <- 0.015 # discount rate
####################
# looping over rest of the years
for (j in 2:p_years) {
#Part 1: Economic model w/o climate damages
#Economic output
K[j]<-(1-p_capDep)*K[j-1]+p_saving*Y_net[j-1]  #capital accumulation
Y_gross[j]<-TFP[j]*K[j]^p_capShare*pop[j]^(1-p_capShare) #Cobb-Douglas production function
gdppc[j]=Y_gross[j]/pop[j]
#emissions
em_MtCO2[j]<-pop[j]*gdppc[j]*enInt[j]*emInt[j]+dam_ac_2[j] #Kaya identity
em_ppm[j]<-em_MtCO2[j]/7810 # convert to atmospheric CO2 concentrations
#Part 2: climate model
#CO2 concentration
CO2ppm[j]<-CO2ppm[j-1]+0.5*((em_ppm[j])- (CO2ppm[j-1]-(ic_preCO2))/(p_carDecay)) #CO2 concentration accumulation
#Radiative forcing
rad_CO2_Wpm2<-5.35*log(CO2ppm[j]/ic_preCO2)
# Converting to temperature
Teq[j]<-rad_CO2_Wpm2*(p_climSens/(5.3*log(2))) #Equilibrium temperature
T[j]=T[j-1]+p_climDelay*(Teq[j]-T[j-1]) #Transient temperature
#Part 3: Economic model with climate damages
climateShare<-(p_damage*T[j]^2)/(1+p_damage*T[j]^2) # damage function
climateDamage[j]<-climateShare*Y_gross[j] # climate damages
Y_net[j]<-Y_gross[j]-climateDamage[j] # output net of damages
C[j]<-Y_net[j]-p_saving*Y_net[j] # consumption
C_pc[j]<-(C[j]/pop[j])*1000 #per capita consumption
#discounting
df_t[j] <- 1/((1+r)^(j-1))
}
climateDamage_2011 <- climateDamage
dam_ac_2<-rep(0, p_years[1])
dam_ac_2[2] <- 1/1000000 # putting 1 Mt for 2011
df_t <- rep(0, p_years) # dicsountings
#df_t[1] <- 1
r <- 0.015 # discount rate
####################
# looping over rest of the years
for (j in 2:p_years) {
#Part 1: Economic model w/o climate damages
#Economic output
K[j]<-(1-p_capDep)*K[j-1]+p_saving*Y_net[j-1]  #capital accumulation
Y_gross[j]<-TFP[j]*K[j]^p_capShare*pop[j]^(1-p_capShare) #Cobb-Douglas production function
gdppc[j]=Y_gross[j]/pop[j]
#emissions
em_MtCO2[j]<-pop[j]*gdppc[j]*enInt[j]*emInt[j] #+dam_ac_2[j] #Kaya identity
em_ppm[j]<-em_MtCO2[j]/7810 # convert to atmospheric CO2 concentrations
#Part 2: climate model
#CO2 concentration
CO2ppm[j]<-CO2ppm[j-1]+0.5*((em_ppm[j])- (CO2ppm[j-1]-(ic_preCO2))/(p_carDecay)) #CO2 concentration accumulation
#Radiative forcing
rad_CO2_Wpm2<-5.35*log(CO2ppm[j]/ic_preCO2)
# Converting to temperature
Teq[j]<-rad_CO2_Wpm2*(p_climSens/(5.3*log(2))) #Equilibrium temperature
T[j]=T[j-1]+p_climDelay*(Teq[j]-T[j-1]) #Transient temperature
#Part 3: Economic model with climate damages
climateShare<-(p_damage*T[j]^2)/(1+p_damage*T[j]^2) # damage function
climateDamage[j]<-climateShare*Y_gross[j] # climate damages
Y_net[j]<-Y_gross[j]-climateDamage[j] # output net of damages
C[j]<-Y_net[j]-p_saving*Y_net[j] # consumption
C_pc[j]<-(C[j]/pop[j])*1000 #per capita consumption
#discounting
df_t[j] <- 1/((1+r)^(j-1))
}
## I added **
climateDamage_BAU <- climateDamage
climateDamage_BAU_df <- as.data.frame(climateDamage_BAU) %>%
rename(BAU= V1)%>%
mutate(observation = 1:n())
# 2011
climateDamage_2011_df <- as.data.frame(climateDamage_2011) %>%
rename(P_2011 = V1)%>%
mutate(observation = 1:n())
BAU_and_2011 <- left_join(climateDamage_BAU_df, climateDamage_2011_df) %>%
select(-observation) %>%
mutate(diff = P_2011 - BAU) %>%
mutate(time = 1:n()) %>%
mutate(discounted = df_t*diff)
SCC_1.5 <- sum(BAU_and_2011$discounted)*1000000
SCC_1.5 <- sum(BAU_and_2011$discounted)*1000000000000
SCC_1.5
limateDamage_2011 - climateDamage_BAU
BAU_and_2011 <- left_join(climateDamage_BAU_df, climateDamage_2011_df) %>%
select(-observation) %>%
mutate(diff = P_2011 - BAU)
View(BAU_and_2011)
climateDamage_2011
setwd("~/Documents/github/ESM215/Lab2")
rm(list = ls())
# read in the data
ex2dat <- read_csv("ESM215_Lab2_analysis.R")
View(ex2dat)
# read in the data
ex2dat <- read_csv("ex2_sample_data2.csv.R")
library(tidyverse)
library(entropy)
install.packages("entropy")
library(tidyverse)
library(entropy)
# read in the data
ex2dat <- read_csv("ex2_sample_data2.csv.R")
# read in the data
ex2dat <- read_csv("ex2_sample_data2.csv")
View(ex2dat)
land_geo <- table(ex2dat$landcover, ex2dat$geology)
head(land_geo)
# read in the data
ex2dat <- read_csv("ex2_sample_data2.csv") %>%
filter(landcover != -9999)
# read in the data
ex2dat <- read_csv("ex2_sample_data2.csv") %>%
filter(landcover != -9999) %>%
filter(geology != -9999) %>%
filter(flowaccum != -9999) %>%
filter(winter_rad != -9999)
land_geo <- table(ex2dat$landcover, ex2dat$geology)
head(land_geo)
mi.empirical(land_geo)
#landcover and geology
land_geo <- table(ex2dat$landcover, ex2dat$geology)
land_geo_mi <- mi.empirical(land_geo)
#landcover and flow accumulation
land_flow <- table(ex2dat$landcover, ex2dat$flowaccum)
land_flow_mi <-mi.empirical(land_flow)
#landcover and winter radiation
land_rad <- table(ex2dat$landcover, ex2dat$winter_rad)
land_rad_mi <-mi.empirical(land_rad)
land_geo_mi
land_flow_mi
land_rad_mi
geo1_land_geo1_flow <- table(ex2dat[ex2dat[,6]==1,5], ex2dat[ex2dat[,6]==1,7])
geo1_land_geo1_flow_mi <- mi.empirical(geo1_land_geo1_flow)
# geol 1 and flow
geo1_land_geo1_flow <- table(ex2dat[ex2dat[,6]==1,5], ex2dat[ex2dat[,6]==1,7])
rlang::last_error()
class(ex2dat)
# try in a different way
geo1_land_geo1_flow <- ex2dat %>%
filter(geology == 1)
View(geo1_land_geo1_flow)
geo1_land_geo1_flow_tab <- table(geo1_land_geo1_flow$landcover,
geo1_land_geo1_flow$flowaccum)
geo1_land_geo1_flow_mi <- mi.empirical(geo1_land_geo1_flow_tab)
geo1_land_geo1_flow_mi
mi_secondlev = function(level, variable){
geo_land_geo_x <- ex2dat %>%
filter(geology == level)
geo_land_geo_x_tab <- table(geo_land_geo_x$landcover,
geo_land_geo_x$variable)
mi <- mi.empirical(geo_land_geo_x_tab)
return(mi)
}
test <- mi_secondlev(1, flowaccum)
test <- mi_secondlev(level = 1, flowaccum)
mi_secondlev = function(level = 1, variable){
geo_land_geo_x <- ex2dat %>%
filter(geology == level)
geo_land_geo_x_tab <- table(geo_land_geo_x$landcover,
geo_land_geo_x$variable)
mi <- mi.empirical(geo_land_geo_x_tab)
return(mi)
}
test <- mi_secondlev(flowaccum)
test <- mi_secondlev(variable = flowaccum)
mi_secondlev = function(level = 1, variable = flowaccum){
geo_land_geo_x <- ex2dat %>%
filter(geology == level)
geo_land_geo_x_tab <- table(geo_land_geo_x$landcover,
geo_land_geo_x$variable)
mi <- mi.empirical(geo_land_geo_x_tab)
return(mi)
}
test <- mi_secondlev(variable = flowaccum)
mi_secondlev = function(level = 1, variable = geo_land_geo_x$flowaccum){
geo_land_geo_x <- ex2dat %>%
filter(geology == level)
geo_land_geo_x_tab <- table(geo_land_geo_x$landcover,
variable)
mi <- mi.empirical(geo_land_geo_x_tab)
return(mi)
}
test <- mi_secondlev()
geo1_land_geo1_flow_mi
geo1_land_geo1_flow_mi <- mi_secondlev()
# Geology 2 | Land | Flow
geo2_land_geo2_flow_mi <- mi_secondlev(level = 2)
geo1_land_geo1_flow_mi
geo2_land_geo2_flow_mi
# Geology 4 | Land | Flow
geo4_land_geo4_flow_mi <- mi_secondlev(level = 4)
geo4_land_geo4_flow_mi
# Geology 1 | Land | winter radiation
geo1_land_geo1_rad_mi <- mi_secondlev(level = 1, variable = geo_land_geo_x$winter_rad)
geo1_land_geo1_flow_mi <- mi_secondlev()
# Geology 2 | Land | Flow
geo2_land_geo2_flow_mi <- mi_secondlev(level = 2)
# Geology 3 | Land | Flow
geo3_land_geo3_flow_mi <- mi_secondlev(level = 3)
# Geology 4 | Land | Flow
geo4_land_geo4_flow_mi <- mi_secondlev(level = 4)
# Geology 5 | Land | Flow
geo5_land_geo5_flow_mi <- mi_secondlev(level = 5)
mi_secondlev = function(level = 1){
geo_land_geo_x <- ex2dat %>%
filter(geology == level)
geo_land_geo_x_tab <- table(geo_land_geo_x$landcover,
geo_land_geo_x$winter_rad)
mi <- mi.empirical(geo_land_geo_x_tab)
return(mi)
}
# Geology 1 | Land | winter radiation
geo1_land_geo1_rad_mi <- mi_secondlev(level = 1)
geo1_land_geo1_rad_mi <- mi_secondlev(level = 1)
# Geology 2 | Land | winter radiation
geo2_land_geo2_rad_mi <- mi_secondlev(level = 2)
# Geology 3 | Land | winter radiation
geo3_land_geo3_rad_mi <- mi_secondlev(level = 3)
# Geology 4 | Land | winter radiation
geo3_land_geo3_rad_mi <- mi_secondlev(level = 4)
# Geology 5 | Land | winter radiation
geo3_land_geo3_rad_mi <- mi_secondlev(level = 5)
# empty dataframe
df_rad <- data.frame(Level = integer(),
winter_rad_mi = numeric())
View(df_rad)
levels_geo <- c(1,2,3,4,5)
land_geo_mi
land_flow_mi
land_rad_mi
geo1_land_geo1_flow_mi
geo2_land_geo2_flow_mi
geo3_land_geo3_flow_mi
geo4_land_geo4_flow_mi
geo5_land_geo5_flow_mi
geo1_land_geo1_rad_mi
geo2_land_geo2_rad_mi
geo3_land_geo3_rad_mi
# Geology 4 | Land | winter radiation
geo4_land_geo4_rad_mi <- mi_secondlev(level = 4)
# Geology 5 | Land | winter radiation
geo5_land_geo5_rad_mi <- mi_secondlev(level = 5)
geo4_land_geo4_rad_mi
geo5_land_geo5_rad_mi
